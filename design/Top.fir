circuit Top :
  module DataPath_Mux :
    input clock : Clock
    input reset : Reset
    output io : { flip valid_vec : UInt<1>[8], flip data_vec : UInt<8>[8], flip priority_vec : UInt<8>[8], ready_vec : UInt<1>[8], valid_grant : UInt<1>, flip ready_grant : UInt<1>, data_grant : UInt<8>}

    wire cat_vec_in : UInt<12>[8] @[DataPath_Mux.scala 24:26]
    node cat_vec_in_0_hi = cat(io.valid_vec[0], io.priority_vec[0]) @[Cat.scala 31:58]
    node _cat_vec_in_0_T = cat(cat_vec_in_0_hi, UInt<3>("h7")) @[Cat.scala 31:58]
    cat_vec_in[0] <= _cat_vec_in_0_T @[DataPath_Mux.scala 27:27]
    node cat_vec_in_1_hi = cat(io.valid_vec[1], io.priority_vec[1]) @[Cat.scala 31:58]
    node _cat_vec_in_1_T = cat(cat_vec_in_1_hi, UInt<3>("h6")) @[Cat.scala 31:58]
    cat_vec_in[1] <= _cat_vec_in_1_T @[DataPath_Mux.scala 27:27]
    node cat_vec_in_2_hi = cat(io.valid_vec[2], io.priority_vec[2]) @[Cat.scala 31:58]
    node _cat_vec_in_2_T = cat(cat_vec_in_2_hi, UInt<3>("h5")) @[Cat.scala 31:58]
    cat_vec_in[2] <= _cat_vec_in_2_T @[DataPath_Mux.scala 27:27]
    node cat_vec_in_3_hi = cat(io.valid_vec[3], io.priority_vec[3]) @[Cat.scala 31:58]
    node _cat_vec_in_3_T = cat(cat_vec_in_3_hi, UInt<3>("h4")) @[Cat.scala 31:58]
    cat_vec_in[3] <= _cat_vec_in_3_T @[DataPath_Mux.scala 27:27]
    node cat_vec_in_4_hi = cat(io.valid_vec[4], io.priority_vec[4]) @[Cat.scala 31:58]
    node _cat_vec_in_4_T = cat(cat_vec_in_4_hi, UInt<3>("h3")) @[Cat.scala 31:58]
    cat_vec_in[4] <= _cat_vec_in_4_T @[DataPath_Mux.scala 27:27]
    node cat_vec_in_5_hi = cat(io.valid_vec[5], io.priority_vec[5]) @[Cat.scala 31:58]
    node _cat_vec_in_5_T = cat(cat_vec_in_5_hi, UInt<3>("h2")) @[Cat.scala 31:58]
    cat_vec_in[5] <= _cat_vec_in_5_T @[DataPath_Mux.scala 27:27]
    node cat_vec_in_6_hi = cat(io.valid_vec[6], io.priority_vec[6]) @[Cat.scala 31:58]
    node _cat_vec_in_6_T = cat(cat_vec_in_6_hi, UInt<3>("h1")) @[Cat.scala 31:58]
    cat_vec_in[6] <= _cat_vec_in_6_T @[DataPath_Mux.scala 27:27]
    node cat_vec_in_7_hi = cat(io.valid_vec[7], io.priority_vec[7]) @[Cat.scala 31:58]
    node _cat_vec_in_7_T = cat(cat_vec_in_7_hi, UInt<3>("h0")) @[Cat.scala 31:58]
    cat_vec_in[7] <= _cat_vec_in_7_T @[DataPath_Mux.scala 27:27]
    wire cat_vec_temp : UInt<12>[8] @[DataPath_Mux.scala 32:28]
    wire result : UInt<12> @[DataPath_Mux.scala 34:22]
    cat_vec_temp[0] <= cat_vec_in[0] @[DataPath_Mux.scala 36:21]
    node _cat_vec_temp_1_T = gt(cat_vec_in[1], cat_vec_temp[0]) @[DataPath_Mux.scala 39:54]
    node _cat_vec_temp_1_T_1 = mux(_cat_vec_temp_1_T, cat_vec_in[1], cat_vec_temp[0]) @[DataPath_Mux.scala 39:35]
    cat_vec_temp[1] <= _cat_vec_temp_1_T_1 @[DataPath_Mux.scala 39:29]
    node _cat_vec_temp_2_T = gt(cat_vec_in[2], cat_vec_temp[1]) @[DataPath_Mux.scala 39:54]
    node _cat_vec_temp_2_T_1 = mux(_cat_vec_temp_2_T, cat_vec_in[2], cat_vec_temp[1]) @[DataPath_Mux.scala 39:35]
    cat_vec_temp[2] <= _cat_vec_temp_2_T_1 @[DataPath_Mux.scala 39:29]
    node _cat_vec_temp_3_T = gt(cat_vec_in[3], cat_vec_temp[2]) @[DataPath_Mux.scala 39:54]
    node _cat_vec_temp_3_T_1 = mux(_cat_vec_temp_3_T, cat_vec_in[3], cat_vec_temp[2]) @[DataPath_Mux.scala 39:35]
    cat_vec_temp[3] <= _cat_vec_temp_3_T_1 @[DataPath_Mux.scala 39:29]
    node _cat_vec_temp_4_T = gt(cat_vec_in[4], cat_vec_temp[3]) @[DataPath_Mux.scala 39:54]
    node _cat_vec_temp_4_T_1 = mux(_cat_vec_temp_4_T, cat_vec_in[4], cat_vec_temp[3]) @[DataPath_Mux.scala 39:35]
    cat_vec_temp[4] <= _cat_vec_temp_4_T_1 @[DataPath_Mux.scala 39:29]
    node _cat_vec_temp_5_T = gt(cat_vec_in[5], cat_vec_temp[4]) @[DataPath_Mux.scala 39:54]
    node _cat_vec_temp_5_T_1 = mux(_cat_vec_temp_5_T, cat_vec_in[5], cat_vec_temp[4]) @[DataPath_Mux.scala 39:35]
    cat_vec_temp[5] <= _cat_vec_temp_5_T_1 @[DataPath_Mux.scala 39:29]
    node _cat_vec_temp_6_T = gt(cat_vec_in[6], cat_vec_temp[5]) @[DataPath_Mux.scala 39:54]
    node _cat_vec_temp_6_T_1 = mux(_cat_vec_temp_6_T, cat_vec_in[6], cat_vec_temp[5]) @[DataPath_Mux.scala 39:35]
    cat_vec_temp[6] <= _cat_vec_temp_6_T_1 @[DataPath_Mux.scala 39:29]
    node _cat_vec_temp_7_T = gt(cat_vec_in[7], cat_vec_temp[6]) @[DataPath_Mux.scala 39:54]
    node _cat_vec_temp_7_T_1 = mux(_cat_vec_temp_7_T, cat_vec_in[7], cat_vec_temp[6]) @[DataPath_Mux.scala 39:35]
    cat_vec_temp[7] <= _cat_vec_temp_7_T_1 @[DataPath_Mux.scala 39:29]
    result <= cat_vec_temp[7] @[DataPath_Mux.scala 42:12]
    io.valid_grant <= UInt<1>("h0") @[DataPath_Mux.scala 44:20]
    io.data_grant <= UInt<1>("h0") @[DataPath_Mux.scala 45:19]
    node _T = bits(result, 2, 0) @[DataPath_Mux.scala 48:20]
    node _T_1 = eq(_T, UInt<3>("h7")) @[DataPath_Mux.scala 48:49]
    when _T_1 : @[DataPath_Mux.scala 48:77]
      io.valid_grant <= io.valid_vec[0] @[DataPath_Mux.scala 49:28]
      io.data_grant <= io.data_vec[0] @[DataPath_Mux.scala 50:27]
    node _T_2 = bits(result, 2, 0) @[DataPath_Mux.scala 48:20]
    node _T_3 = eq(_T_2, UInt<3>("h6")) @[DataPath_Mux.scala 48:49]
    when _T_3 : @[DataPath_Mux.scala 48:77]
      io.valid_grant <= io.valid_vec[1] @[DataPath_Mux.scala 49:28]
      io.data_grant <= io.data_vec[1] @[DataPath_Mux.scala 50:27]
    node _T_4 = bits(result, 2, 0) @[DataPath_Mux.scala 48:20]
    node _T_5 = eq(_T_4, UInt<3>("h5")) @[DataPath_Mux.scala 48:49]
    when _T_5 : @[DataPath_Mux.scala 48:77]
      io.valid_grant <= io.valid_vec[2] @[DataPath_Mux.scala 49:28]
      io.data_grant <= io.data_vec[2] @[DataPath_Mux.scala 50:27]
    node _T_6 = bits(result, 2, 0) @[DataPath_Mux.scala 48:20]
    node _T_7 = eq(_T_6, UInt<3>("h4")) @[DataPath_Mux.scala 48:49]
    when _T_7 : @[DataPath_Mux.scala 48:77]
      io.valid_grant <= io.valid_vec[3] @[DataPath_Mux.scala 49:28]
      io.data_grant <= io.data_vec[3] @[DataPath_Mux.scala 50:27]
    node _T_8 = bits(result, 2, 0) @[DataPath_Mux.scala 48:20]
    node _T_9 = eq(_T_8, UInt<2>("h3")) @[DataPath_Mux.scala 48:49]
    when _T_9 : @[DataPath_Mux.scala 48:77]
      io.valid_grant <= io.valid_vec[4] @[DataPath_Mux.scala 49:28]
      io.data_grant <= io.data_vec[4] @[DataPath_Mux.scala 50:27]
    node _T_10 = bits(result, 2, 0) @[DataPath_Mux.scala 48:20]
    node _T_11 = eq(_T_10, UInt<2>("h2")) @[DataPath_Mux.scala 48:49]
    when _T_11 : @[DataPath_Mux.scala 48:77]
      io.valid_grant <= io.valid_vec[5] @[DataPath_Mux.scala 49:28]
      io.data_grant <= io.data_vec[5] @[DataPath_Mux.scala 50:27]
    node _T_12 = bits(result, 2, 0) @[DataPath_Mux.scala 48:20]
    node _T_13 = eq(_T_12, UInt<1>("h1")) @[DataPath_Mux.scala 48:49]
    when _T_13 : @[DataPath_Mux.scala 48:77]
      io.valid_grant <= io.valid_vec[6] @[DataPath_Mux.scala 49:28]
      io.data_grant <= io.data_vec[6] @[DataPath_Mux.scala 50:27]
    node _T_14 = bits(result, 2, 0) @[DataPath_Mux.scala 48:20]
    node _T_15 = eq(_T_14, UInt<1>("h0")) @[DataPath_Mux.scala 48:49]
    when _T_15 : @[DataPath_Mux.scala 48:77]
      io.valid_grant <= io.valid_vec[7] @[DataPath_Mux.scala 49:28]
      io.data_grant <= io.data_vec[7] @[DataPath_Mux.scala 50:27]
    node _io_ready_vec_0_T = bits(result, 2, 0) @[DataPath_Mux.scala 56:42]
    node _io_ready_vec_0_T_1 = eq(_io_ready_vec_0_T, UInt<3>("h7")) @[DataPath_Mux.scala 56:71]
    node _io_ready_vec_0_T_2 = mux(_io_ready_vec_0_T_1, io.ready_grant, UInt<1>("h0")) @[DataPath_Mux.scala 56:35]
    io.ready_vec[0] <= _io_ready_vec_0_T_2 @[DataPath_Mux.scala 56:29]
    node _io_ready_vec_1_T = bits(result, 2, 0) @[DataPath_Mux.scala 56:42]
    node _io_ready_vec_1_T_1 = eq(_io_ready_vec_1_T, UInt<3>("h6")) @[DataPath_Mux.scala 56:71]
    node _io_ready_vec_1_T_2 = mux(_io_ready_vec_1_T_1, io.ready_grant, UInt<1>("h0")) @[DataPath_Mux.scala 56:35]
    io.ready_vec[1] <= _io_ready_vec_1_T_2 @[DataPath_Mux.scala 56:29]
    node _io_ready_vec_2_T = bits(result, 2, 0) @[DataPath_Mux.scala 56:42]
    node _io_ready_vec_2_T_1 = eq(_io_ready_vec_2_T, UInt<3>("h5")) @[DataPath_Mux.scala 56:71]
    node _io_ready_vec_2_T_2 = mux(_io_ready_vec_2_T_1, io.ready_grant, UInt<1>("h0")) @[DataPath_Mux.scala 56:35]
    io.ready_vec[2] <= _io_ready_vec_2_T_2 @[DataPath_Mux.scala 56:29]
    node _io_ready_vec_3_T = bits(result, 2, 0) @[DataPath_Mux.scala 56:42]
    node _io_ready_vec_3_T_1 = eq(_io_ready_vec_3_T, UInt<3>("h4")) @[DataPath_Mux.scala 56:71]
    node _io_ready_vec_3_T_2 = mux(_io_ready_vec_3_T_1, io.ready_grant, UInt<1>("h0")) @[DataPath_Mux.scala 56:35]
    io.ready_vec[3] <= _io_ready_vec_3_T_2 @[DataPath_Mux.scala 56:29]
    node _io_ready_vec_4_T = bits(result, 2, 0) @[DataPath_Mux.scala 56:42]
    node _io_ready_vec_4_T_1 = eq(_io_ready_vec_4_T, UInt<2>("h3")) @[DataPath_Mux.scala 56:71]
    node _io_ready_vec_4_T_2 = mux(_io_ready_vec_4_T_1, io.ready_grant, UInt<1>("h0")) @[DataPath_Mux.scala 56:35]
    io.ready_vec[4] <= _io_ready_vec_4_T_2 @[DataPath_Mux.scala 56:29]
    node _io_ready_vec_5_T = bits(result, 2, 0) @[DataPath_Mux.scala 56:42]
    node _io_ready_vec_5_T_1 = eq(_io_ready_vec_5_T, UInt<2>("h2")) @[DataPath_Mux.scala 56:71]
    node _io_ready_vec_5_T_2 = mux(_io_ready_vec_5_T_1, io.ready_grant, UInt<1>("h0")) @[DataPath_Mux.scala 56:35]
    io.ready_vec[5] <= _io_ready_vec_5_T_2 @[DataPath_Mux.scala 56:29]
    node _io_ready_vec_6_T = bits(result, 2, 0) @[DataPath_Mux.scala 56:42]
    node _io_ready_vec_6_T_1 = eq(_io_ready_vec_6_T, UInt<1>("h1")) @[DataPath_Mux.scala 56:71]
    node _io_ready_vec_6_T_2 = mux(_io_ready_vec_6_T_1, io.ready_grant, UInt<1>("h0")) @[DataPath_Mux.scala 56:35]
    io.ready_vec[6] <= _io_ready_vec_6_T_2 @[DataPath_Mux.scala 56:29]
    node _io_ready_vec_7_T = bits(result, 2, 0) @[DataPath_Mux.scala 56:42]
    node _io_ready_vec_7_T_1 = eq(_io_ready_vec_7_T, UInt<1>("h0")) @[DataPath_Mux.scala 56:71]
    node _io_ready_vec_7_T_2 = mux(_io_ready_vec_7_T_1, io.ready_grant, UInt<1>("h0")) @[DataPath_Mux.scala 56:35]
    io.ready_vec[7] <= _io_ready_vec_7_T_2 @[DataPath_Mux.scala 56:29]

  module FIFO :
    input clock : Clock
    input reset : Reset
    output io : { data_o : UInt<3>, flip read_en : UInt<1>, is_empty : UInt<1>, flip data_i : UInt<3>, flip write_en : UInt<1>, is_full : UInt<1>}

    cmem ram : UInt<3> [16] @[FIFO.scala 19:18]
    wire read_pointer_next : UInt<5> @[FIFO.scala 22:33]
    wire write_pointer_next : UInt<5> @[FIFO.scala 23:34]
    reg read_pointer : UInt, clock with :
      reset => (reset, UInt<5>("h0")) @[FIFO.scala 25:31]
    read_pointer <= read_pointer_next @[FIFO.scala 25:31]
    reg write_pointer : UInt, clock with :
      reset => (reset, UInt<5>("h0")) @[FIFO.scala 26:32]
    write_pointer <= write_pointer_next @[FIFO.scala 26:32]
    reg is_empty_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[FIFO.scala 29:31]
    reg is_full_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[FIFO.scala 30:30]
    node _write_pointer_next_T = eq(is_full_reg, UInt<1>("h0")) @[FIFO.scala 33:63]
    node _write_pointer_next_T_1 = and(io.write_en, _write_pointer_next_T) @[FIFO.scala 33:60]
    node _write_pointer_next_T_2 = mux(_write_pointer_next_T_1, UInt<1>("h1"), UInt<1>("h0")) @[FIFO.scala 33:46]
    node _write_pointer_next_T_3 = add(write_pointer, _write_pointer_next_T_2) @[FIFO.scala 33:41]
    node _write_pointer_next_T_4 = tail(_write_pointer_next_T_3, 1) @[FIFO.scala 33:41]
    write_pointer_next <= _write_pointer_next_T_4 @[FIFO.scala 33:24]
    node _read_pointer_next_T = eq(is_empty_reg, UInt<1>("h0")) @[FIFO.scala 34:60]
    node _read_pointer_next_T_1 = and(io.read_en, _read_pointer_next_T) @[FIFO.scala 34:57]
    node _read_pointer_next_T_2 = mux(_read_pointer_next_T_1, UInt<1>("h1"), UInt<1>("h0")) @[FIFO.scala 34:44]
    node _read_pointer_next_T_3 = add(read_pointer, _read_pointer_next_T_2) @[FIFO.scala 34:39]
    node _read_pointer_next_T_4 = tail(_read_pointer_next_T_3, 1) @[FIFO.scala 34:39]
    read_pointer_next <= _read_pointer_next_T_4 @[FIFO.scala 34:23]
    io.is_empty <= is_empty_reg @[FIFO.scala 36:17]
    io.is_full <= is_full_reg @[FIFO.scala 37:16]
    node _is_full_reg_T = bits(write_pointer_next, 4, 4) @[FIFO.scala 40:43]
    node _is_full_reg_T_1 = not(_is_full_reg_T) @[FIFO.scala 40:24]
    node _is_full_reg_T_2 = bits(write_pointer_next, 3, 0) @[FIFO.scala 40:78]
    node _is_full_reg_T_3 = cat(_is_full_reg_T_1, _is_full_reg_T_2) @[Cat.scala 31:58]
    node _is_full_reg_T_4 = eq(_is_full_reg_T_3, read_pointer) @[FIFO.scala 40:100]
    is_full_reg <= _is_full_reg_T_4 @[FIFO.scala 40:17]
    node _is_empty_reg_T = eq(read_pointer_next, write_pointer) @[FIFO.scala 41:39]
    is_empty_reg <= _is_empty_reg_T @[FIFO.scala 41:18]
    node _T = eq(is_full_reg, UInt<1>("h0")) @[FIFO.scala 44:10]
    node _T_1 = and(_T, io.write_en) @[FIFO.scala 44:23]
    when _T_1 : @[FIFO.scala 44:38]
      node _T_2 = bits(write_pointer, 3, 0) @[FIFO.scala 45:32]
      write mport MPORT = ram[_T_2], clock
      MPORT <= io.data_i
    node _io_data_o_T = bits(read_pointer, 3, 0) @[FIFO.scala 49:39]
    read mport io_data_o_MPORT = ram[_io_data_o_T], clock @[FIFO.scala 49:26]
    io.data_o <= io_data_o_MPORT @[FIFO.scala 49:15]

  module DataPath_8to3 :
    input clock : Clock
    input reset : Reset
    output io : { handshake_i : { flip valid : UInt<1>, ready : UInt<1>}, flip data_i : UInt<8>, handshake_o : { flip valid : UInt<1>, ready : UInt<1>}, data_o : UInt<3>}

    reg leave_2bit : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[DataPath_8to3.scala 24:29]
    reg leave_1bit : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[DataPath_8to3.scala 25:29]
    inst FIFO of FIFO @[DataPath_8to3.scala 27:22]
    FIFO.clock <= clock
    FIFO.reset <= reset
    reg state_reg : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[DataPath_8to3.scala 36:28]
    reg flag_reg : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[DataPath_8to3.scala 39:27]
    node _T = eq(UInt<4>("h0"), state_reg) @[DataPath_8to3.scala 42:22]
    when _T : @[DataPath_8to3.scala 42:22]
      when io.handshake_i.valid : @[DataPath_8to3.scala 44:39]
        node _T_1 = eq(flag_reg, UInt<2>("h0")) @[DataPath_8to3.scala 45:31]
        when _T_1 : @[DataPath_8to3.scala 45:42]
          state_reg <= UInt<4>("h1") @[DataPath_8to3.scala 45:54]
        node _T_2 = eq(flag_reg, UInt<2>("h1")) @[DataPath_8to3.scala 46:31]
        when _T_2 : @[DataPath_8to3.scala 46:42]
          state_reg <= UInt<4>("h3") @[DataPath_8to3.scala 46:54]
        node _T_3 = eq(flag_reg, UInt<2>("h2")) @[DataPath_8to3.scala 47:31]
        when _T_3 : @[DataPath_8to3.scala 47:42]
          state_reg <= UInt<4>("h6") @[DataPath_8to3.scala 47:54]
    else :
      node _T_4 = eq(UInt<4>("h1"), state_reg) @[DataPath_8to3.scala 42:22]
      when _T_4 : @[DataPath_8to3.scala 42:22]
        when FIFO.io.is_full : @[DataPath_8to3.scala 51:34]
          state_reg <= UInt<4>("h1") @[DataPath_8to3.scala 52:27]
        else :
          state_reg <= UInt<4>("h2") @[DataPath_8to3.scala 54:27]
        node _leave_2bit_T = bits(io.data_i, 7, 6) @[DataPath_8to3.scala 57:36]
        leave_2bit <= _leave_2bit_T @[DataPath_8to3.scala 57:24]
      else :
        node _T_5 = eq(UInt<4>("h2"), state_reg) @[DataPath_8to3.scala 42:22]
        when _T_5 : @[DataPath_8to3.scala 42:22]
          when FIFO.io.is_full : @[DataPath_8to3.scala 60:34]
            state_reg <= UInt<4>("h2") @[DataPath_8to3.scala 61:27]
          else :
            state_reg <= UInt<4>("h0") @[DataPath_8to3.scala 63:27]
          flag_reg <= UInt<2>("h1") @[DataPath_8to3.scala 66:22]
        else :
          node _T_6 = eq(UInt<4>("h3"), state_reg) @[DataPath_8to3.scala 42:22]
          when _T_6 : @[DataPath_8to3.scala 42:22]
            when FIFO.io.is_full : @[DataPath_8to3.scala 69:34]
              state_reg <= UInt<4>("h3") @[DataPath_8to3.scala 70:27]
            else :
              state_reg <= UInt<4>("h4") @[DataPath_8to3.scala 72:27]
            node _leave_1bit_T = bits(io.data_i, 7, 7) @[DataPath_8to3.scala 75:36]
            leave_1bit <= _leave_1bit_T @[DataPath_8to3.scala 75:24]
          else :
            node _T_7 = eq(UInt<4>("h4"), state_reg) @[DataPath_8to3.scala 42:22]
            when _T_7 : @[DataPath_8to3.scala 42:22]
              when FIFO.io.is_full : @[DataPath_8to3.scala 78:34]
                state_reg <= UInt<4>("h4") @[DataPath_8to3.scala 79:27]
              else :
                state_reg <= UInt<4>("h5") @[DataPath_8to3.scala 81:27]
            else :
              node _T_8 = eq(UInt<4>("h5"), state_reg) @[DataPath_8to3.scala 42:22]
              when _T_8 : @[DataPath_8to3.scala 42:22]
                when FIFO.io.is_full : @[DataPath_8to3.scala 85:34]
                  state_reg <= UInt<4>("h5") @[DataPath_8to3.scala 86:27]
                else :
                  state_reg <= UInt<4>("h0") @[DataPath_8to3.scala 88:27]
                flag_reg <= UInt<2>("h2") @[DataPath_8to3.scala 91:22]
              else :
                node _T_9 = eq(UInt<4>("h6"), state_reg) @[DataPath_8to3.scala 42:22]
                when _T_9 : @[DataPath_8to3.scala 42:22]
                  when FIFO.io.is_full : @[DataPath_8to3.scala 94:34]
                    state_reg <= UInt<4>("h6") @[DataPath_8to3.scala 95:27]
                  else :
                    state_reg <= UInt<4>("h7") @[DataPath_8to3.scala 97:27]
                else :
                  node _T_10 = eq(UInt<4>("h7"), state_reg) @[DataPath_8to3.scala 42:22]
                  when _T_10 : @[DataPath_8to3.scala 42:22]
                    when FIFO.io.is_full : @[DataPath_8to3.scala 101:34]
                      state_reg <= UInt<4>("h7") @[DataPath_8to3.scala 102:27]
                    else :
                      state_reg <= UInt<4>("h8") @[DataPath_8to3.scala 104:27]
                  else :
                    node _T_11 = eq(UInt<4>("h8"), state_reg) @[DataPath_8to3.scala 42:22]
                    when _T_11 : @[DataPath_8to3.scala 42:22]
                      when FIFO.io.is_full : @[DataPath_8to3.scala 108:34]
                        state_reg <= UInt<4>("h8") @[DataPath_8to3.scala 109:27]
                      else :
                        state_reg <= UInt<4>("h0") @[DataPath_8to3.scala 111:27]
                      flag_reg <= UInt<2>("h0") @[DataPath_8to3.scala 114:22]
    wire write_en_wire : UInt<1>
    write_en_wire <= UInt<1>("h0")
    wire data_i_wire : UInt<3>
    data_i_wire <= UInt<3>("h0")
    FIFO.io.write_en <= write_en_wire @[DataPath_8to3.scala 122:22]
    FIFO.io.data_i <= data_i_wire @[DataPath_8to3.scala 123:20]
    node _T_12 = eq(UInt<4>("h1"), state_reg) @[DataPath_8to3.scala 125:22]
    when _T_12 : @[DataPath_8to3.scala 125:22]
      write_en_wire <= UInt<1>("h1") @[DataPath_8to3.scala 127:27]
      node _data_i_wire_T = bits(io.data_i, 2, 0) @[DataPath_8to3.scala 128:37]
      data_i_wire <= _data_i_wire_T @[DataPath_8to3.scala 128:25]
    else :
      node _T_13 = eq(UInt<4>("h2"), state_reg) @[DataPath_8to3.scala 125:22]
      when _T_13 : @[DataPath_8to3.scala 125:22]
        write_en_wire <= UInt<1>("h1") @[DataPath_8to3.scala 131:27]
        node _data_i_wire_T_1 = bits(io.data_i, 5, 3) @[DataPath_8to3.scala 132:37]
        data_i_wire <= _data_i_wire_T_1 @[DataPath_8to3.scala 132:25]
      else :
        node _T_14 = eq(UInt<4>("h3"), state_reg) @[DataPath_8to3.scala 125:22]
        when _T_14 : @[DataPath_8to3.scala 125:22]
          write_en_wire <= UInt<1>("h1") @[DataPath_8to3.scala 135:27]
          node _data_i_wire_T_2 = bits(io.data_i, 0, 0) @[DataPath_8to3.scala 136:41]
          node _data_i_wire_T_3 = cat(_data_i_wire_T_2, leave_2bit) @[Cat.scala 31:58]
          data_i_wire <= _data_i_wire_T_3 @[DataPath_8to3.scala 136:25]
        else :
          node _T_15 = eq(UInt<4>("h4"), state_reg) @[DataPath_8to3.scala 125:22]
          when _T_15 : @[DataPath_8to3.scala 125:22]
            write_en_wire <= UInt<1>("h1") @[DataPath_8to3.scala 139:27]
            node _data_i_wire_T_4 = bits(io.data_i, 3, 1) @[DataPath_8to3.scala 140:37]
            data_i_wire <= _data_i_wire_T_4 @[DataPath_8to3.scala 140:25]
          else :
            node _T_16 = eq(UInt<4>("h5"), state_reg) @[DataPath_8to3.scala 125:22]
            when _T_16 : @[DataPath_8to3.scala 125:22]
              write_en_wire <= UInt<1>("h1") @[DataPath_8to3.scala 143:27]
              node _data_i_wire_T_5 = bits(io.data_i, 6, 4) @[DataPath_8to3.scala 144:37]
              data_i_wire <= _data_i_wire_T_5 @[DataPath_8to3.scala 144:25]
            else :
              node _T_17 = eq(UInt<4>("h6"), state_reg) @[DataPath_8to3.scala 125:22]
              when _T_17 : @[DataPath_8to3.scala 125:22]
                write_en_wire <= UInt<1>("h1") @[DataPath_8to3.scala 147:27]
                node _data_i_wire_T_6 = bits(io.data_i, 1, 0) @[DataPath_8to3.scala 148:41]
                node _data_i_wire_T_7 = cat(_data_i_wire_T_6, leave_1bit) @[Cat.scala 31:58]
                data_i_wire <= _data_i_wire_T_7 @[DataPath_8to3.scala 148:25]
              else :
                node _T_18 = eq(UInt<4>("h7"), state_reg) @[DataPath_8to3.scala 125:22]
                when _T_18 : @[DataPath_8to3.scala 125:22]
                  write_en_wire <= UInt<1>("h1") @[DataPath_8to3.scala 151:27]
                  node _data_i_wire_T_8 = bits(io.data_i, 4, 2) @[DataPath_8to3.scala 152:37]
                  data_i_wire <= _data_i_wire_T_8 @[DataPath_8to3.scala 152:25]
                else :
                  node _T_19 = eq(UInt<4>("h8"), state_reg) @[DataPath_8to3.scala 125:22]
                  when _T_19 : @[DataPath_8to3.scala 125:22]
                    write_en_wire <= UInt<1>("h1") @[DataPath_8to3.scala 155:27]
                    node _data_i_wire_T_9 = bits(io.data_i, 7, 5) @[DataPath_8to3.scala 156:37]
                    data_i_wire <= _data_i_wire_T_9 @[DataPath_8to3.scala 156:25]
    node _io_handshake_i_ready_T = eq(state_reg, UInt<4>("h2")) @[DataPath_8to3.scala 159:41]
    node _io_handshake_i_ready_T_1 = eq(state_reg, UInt<4>("h5")) @[DataPath_8to3.scala 159:73]
    node _io_handshake_i_ready_T_2 = or(_io_handshake_i_ready_T, _io_handshake_i_ready_T_1) @[DataPath_8to3.scala 159:59]
    node _io_handshake_i_ready_T_3 = eq(state_reg, UInt<4>("h8")) @[DataPath_8to3.scala 159:105]
    node _io_handshake_i_ready_T_4 = or(_io_handshake_i_ready_T_2, _io_handshake_i_ready_T_3) @[DataPath_8to3.scala 159:91]
    node _io_handshake_i_ready_T_5 = eq(FIFO.io.is_full, UInt<1>("h0")) @[DataPath_8to3.scala 159:128]
    node _io_handshake_i_ready_T_6 = and(_io_handshake_i_ready_T_4, _io_handshake_i_ready_T_5) @[DataPath_8to3.scala 159:124]
    io.handshake_i.ready <= _io_handshake_i_ready_T_6 @[DataPath_8to3.scala 159:26]
    FIFO.io.read_en <= io.handshake_o.valid @[DataPath_8to3.scala 162:21]
    node _io_handshake_o_ready_T = eq(FIFO.io.is_empty, UInt<1>("h0")) @[DataPath_8to3.scala 163:54]
    node _io_handshake_o_ready_T_1 = and(io.handshake_o.valid, _io_handshake_o_ready_T) @[DataPath_8to3.scala 163:50]
    io.handshake_o.ready <= _io_handshake_o_ready_T_1 @[DataPath_8to3.scala 163:26]
    io.data_o <= FIFO.io.data_o @[DataPath_8to3.scala 164:15]

  module Top :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip valid_vec_i : UInt<1>[8], flip data_vec_i : UInt<8>[8], flip priority_vec_i : UInt<8>[8], ready_vec_i : UInt<1>[8], data_o : UInt<3>, flip valid_o : UInt<1>, ready_o : UInt<1>}

    inst dataPath_Mux of DataPath_Mux @[Top.scala 20:30]
    dataPath_Mux.clock <= clock
    dataPath_Mux.reset <= reset
    inst dataPath_8to3 of DataPath_8to3 @[Top.scala 21:31]
    dataPath_8to3.clock <= clock
    dataPath_8to3.reset <= reset
    dataPath_Mux.io.data_vec[0] <= io.data_vec_i[0] @[Top.scala 24:33]
    dataPath_Mux.io.data_vec[1] <= io.data_vec_i[1] @[Top.scala 24:33]
    dataPath_Mux.io.data_vec[2] <= io.data_vec_i[2] @[Top.scala 24:33]
    dataPath_Mux.io.data_vec[3] <= io.data_vec_i[3] @[Top.scala 24:33]
    dataPath_Mux.io.data_vec[4] <= io.data_vec_i[4] @[Top.scala 24:33]
    dataPath_Mux.io.data_vec[5] <= io.data_vec_i[5] @[Top.scala 24:33]
    dataPath_Mux.io.data_vec[6] <= io.data_vec_i[6] @[Top.scala 24:33]
    dataPath_Mux.io.data_vec[7] <= io.data_vec_i[7] @[Top.scala 24:33]
    dataPath_Mux.io.valid_vec[0] <= io.valid_vec_i[0] @[Top.scala 25:33]
    dataPath_Mux.io.valid_vec[1] <= io.valid_vec_i[1] @[Top.scala 25:33]
    dataPath_Mux.io.valid_vec[2] <= io.valid_vec_i[2] @[Top.scala 25:33]
    dataPath_Mux.io.valid_vec[3] <= io.valid_vec_i[3] @[Top.scala 25:33]
    dataPath_Mux.io.valid_vec[4] <= io.valid_vec_i[4] @[Top.scala 25:33]
    dataPath_Mux.io.valid_vec[5] <= io.valid_vec_i[5] @[Top.scala 25:33]
    dataPath_Mux.io.valid_vec[6] <= io.valid_vec_i[6] @[Top.scala 25:33]
    dataPath_Mux.io.valid_vec[7] <= io.valid_vec_i[7] @[Top.scala 25:33]
    dataPath_Mux.io.priority_vec[0] <= io.priority_vec_i[0] @[Top.scala 26:34]
    dataPath_Mux.io.priority_vec[1] <= io.priority_vec_i[1] @[Top.scala 26:34]
    dataPath_Mux.io.priority_vec[2] <= io.priority_vec_i[2] @[Top.scala 26:34]
    dataPath_Mux.io.priority_vec[3] <= io.priority_vec_i[3] @[Top.scala 26:34]
    dataPath_Mux.io.priority_vec[4] <= io.priority_vec_i[4] @[Top.scala 26:34]
    dataPath_Mux.io.priority_vec[5] <= io.priority_vec_i[5] @[Top.scala 26:34]
    dataPath_Mux.io.priority_vec[6] <= io.priority_vec_i[6] @[Top.scala 26:34]
    dataPath_Mux.io.priority_vec[7] <= io.priority_vec_i[7] @[Top.scala 26:34]
    io.ready_vec_i <= dataPath_Mux.io.ready_vec @[Top.scala 27:20]
    dataPath_8to3.io.data_i <= dataPath_Mux.io.data_grant @[Top.scala 29:29]
    dataPath_8to3.io.handshake_i.valid <= dataPath_Mux.io.valid_grant @[Top.scala 30:40]
    dataPath_Mux.io.ready_grant <= dataPath_8to3.io.handshake_i.ready @[Top.scala 31:33]
    io.data_o <= dataPath_8to3.io.data_o @[Top.scala 34:16]
    io.ready_o <= dataPath_8to3.io.handshake_o.ready @[Top.scala 35:16]
    dataPath_8to3.io.handshake_o.valid <= io.valid_o @[Top.scala 36:40]

